#!/bin/bash

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# <http://www.apache.org/licenses/LICENSE-2.0>
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
set -e

BASEDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
. $BASEDIR/ahr-lib.sh

function show_help(){

    echo "Set of operations to control popular preconfigured GTM Configurations."
    echo ""
    echo " ahr-lb-ctl create-proxy-mig|create-xlb|create-external-ip|check-ssl-status|create-backend|create-gxlb|deploy-start-script-to-gcs"
    echo ""
    echo "Examples:"
    echo ""
}

# options
pps=""
while(($#)); do
case "$1" in
  -p|--project)
    PROJECT="$2"
    shift 2;;

  -n|--network)
    NETWORK="$2"
    shift 2;;

  -r|--region)
    REGION="$2"
    shift 2;;

  -z|--zone)
    ZONE="$2"
    shift 2;;

  -x|--ax-region)
    AX_REGION="$2"
    shift 2;;

  *)
    pps="$pps $1"
    shift;;
esac
done
eval set -- "$pps"


ACTION="$1"

#-----------------------------------------------------------------------
if [ "create-proxy-mig" == "$ACTION" ]; then

    check_envvars "PROJECT REGION NETWORK SUBNET APIGEE_ENDPOINT MIG"
    check_envvars "PROXY_BUCKET PROXY_SCRIPT PROXY_MACHINE_TYPE PROXY_MIG_MIN_SIZE PROXY_MIG_MAX_SIZE"

echo "INFO: Proxy MIG Template: Create Instance Template"
## TODO: [ ] verify --no-address
gcloud compute instance-templates create $MIG-template \
  --region "$REGION" \
  --network "$NETWORK" \
  --subnet "$SUBNET" \
  --tags=https-server,gke-apigee-proxy-healthcheck \
  --machine-type "$PROXY_MACHINE_TYPE" \
  --image-family centos-7 \
  --image-project centos-cloud --boot-disk-size 20GB \
  --metadata ENDPOINT="$APIGEE_ENDPOINT",startup-script-url=$PROXY_BUCKET/$PROXY_SCRIPT \
  --project "$PROJECT"

echo "INFO: Proxy MIG: Create a managed instance group"
gcloud compute instance-groups managed create "$MIG" \
  --base-instance-name $MIG \
  --size "$PROXY_MIG_MIN_SIZE" \
  --template $MIG-template \
  --region "$REGION" \
  --project "$PROJECT"

echo "INFO: Proxy MIG: Configure autoscaling for the group"
gcloud compute instance-groups managed set-autoscaling "$MIG" \
  --region "$REGION" \
  --max-num-replicas $PROXY_MIG_MAX_SIZE \
  --target-cpu-utilization 0.75 \
  --cool-down-period 90 \
  --project "$PROJECT"

echo "INFO: Proxy MIG: Defined a named port"
gcloud compute instance-groups managed set-named-ports "$MIG" \
  --region "$REGION" \
  --named-ports https:443,status-check:15021 \
  --project "$PROJECT"




#-----------------------------------------------------------------------
elif [ "create-external-ip" == "$ACTION" ]; then



### TODO: Refactor: might not belong here: too inflexible


echo "INFO: External IP: Reserve an IP address for the Load Balancer"
gcloud compute addresses create vip-address --ip-version=IPV4 --global --project "$PROJECT"

echo "INFO: External IP: Get a reserved IP address"
export RUNTIME_IP=$(gcloud compute addresses describe vip-address --format="get(address)" --global --project "$PROJECT")

# Example: FQDN= 34-117-145-185.nip.io
export RUNTIME_HOST_ALIAS=$(echo "$RUNTIME_IP" | tr '.' '-').nip.io

echo "INFO: Host Alias: $RUNTIME_HOST_ALIAS"

echo "INFO: External IP: Create Google Managed SSL Certificate"
gcloud compute ssl-certificates create apigee-ssl-cert \
    --domains="$RUNTIME_HOST_ALIAS" --project "$PROJECT"


#-----------------------------------------------------------------------
elif [ "check-ssl-status" == "$ACTION" ]; then

gcloud beta compute ssl-certificates describe apigee-ssl-cert \
    --global \
    --format="get(managed.domainStatus,managed.status)"


#-----------------------------------------------------------------------
elif [ "create-backend" == "$ACTION" ]; then


echo "INFO: Backend: Create a firewall rule for default-allow-https"
gcloud compute firewall-rules create default-allow-https \
  --direction=INGRESS \
  --priority=1000 \
  --network=$NETWORK \
  --action=ALLOW \
  --rules=tcp:443 \
  --source-ranges=0.0.0.0/0 \
  --target-tags=https-server \
  --project=$PROJECT  || echo "Failed to create - ignoring assuming it already exists"

echo "INFO: Backend: Create a firewall rule that lets the Load Balancer access Proxy VM"
gcloud compute firewall-rules create k8s-allow-lb-to-apigee-proxy-healthcheck \
    --description "Allow incoming from GLB on TCP port 15021 to Apigee Proxy" \
    --network "$NETWORK" \
    --allow=tcp:15021 \
    --source-ranges=130.211.0.0/22,35.191.0.0/16 \
    --target-tags=gke-apigee-proxy-healthcheck \
    --project "$PROJECT" || echo "Failed to create - ignoring assuming it already exists"

echo "INFO: Backend: Create a health check"
gcloud compute health-checks create http hc-apigee-proxy-15021 \
  --port 15021 --global \
  --request-path /healthz/ready --project "$PROJECT"



echo "INFO: Backend: Create a backend service called 'apigee-proxy-backend'"
gcloud compute backend-services create apigee-proxy-backend \
  --protocol HTTPS \
  --health-checks hc-apigee-proxy-15021 \
  --port-name https \
  --timeout 60s \
  --connection-draining-timeout 300s \
  --global \
  --project "$PROJECT"


#-----------------------------------------------------------------------
elif [ "add-backend" == "$ACTION" ]; then


echo "INFO: Host Alias: Add the Load Balancer Proxy VM instance group to your backend service"
gcloud compute backend-services add-backend apigee-proxy-backend \
  --instance-group "$MIG" \
  --instance-group-region "$REGION" \
  --balancing-mode UTILIZATION --max-utilization 0.8 --global --project "$PROJECT"


#-----------------------------------------------------------------------
elif [ "create-glb" == "$ACTION" ]; then


echo "INFO: GLB: Create a Load Balancing URL map"
gcloud compute url-maps create apigee-proxy-glb \
  --default-service apigee-proxy-backend \
  --project "$PROJECT"

echo "INFO: GLB: Create a Load Balancing target HTTPS proxy"
gcloud compute target-https-proxies create apigee-proxy-https-proxy \
  --url-map apigee-proxy-glb \
  --ssl-certificates apigee-ssl-cert --project "$PROJECT"

echo "INFO: GLB: Create a global forwarding rule"
gcloud compute forwarding-rules create apigee-proxy-https-lb-rule \
  --address vip-address --global \
  --target-https-proxy apigee-proxy-https-proxy --ports 443 --project "$PROJECT"




#-----------------------------------------------------------------------
elif [ "deploy-start-script-to-gcs" == "$ACTION" ]; then
    if [ "$#" -lt 4 ]; then
        echo "ERROR: No proxy script bucket or proxy script local path or proxy startup script is provided."
        echo "I.E.:"
        echo " ahr-lb-ctl deploy-start-script-to-gcs $PROXY_BUCKET $PROXY_SCRIPT_LPATH $PROXY_SCRIPT"
        echo ""
        show_help
        exit 5
    fi

    PROXY_BUCKET=$2
    PROXY_SCRIPT_LPATH=$3
    PROXY_SCRIPT=$4

    check_envvars "PROJECT PROXY_BUCKET PROXY_SCRIPT REGION"
    check_commands "gsutil"

    gsutil ls -b $PROXY_BUCKET || gsutil mb -l $REGION $PROXY_BUCKET

    (
    cd $PROXY_SCRIPT_LPATH
    gsutil cp $PROXY_SCRIPT $PROXY_BUCKET
    )

    COMPUTE_SA=$(gcloud projects describe $PROJECT --format="value(projectNumber)")-compute@developer.gserviceaccount.com
    gsutil acl ch -u $COMPUTE_SA:R $PROXY_BUCKET/$PROXY_SCRIPT


#-----------------------------------------------------------------------
else
    echo "Action unknown: $ACTION"
    echo ""
    show_help
    exit 2
fi
#-----------------------------------------------------------------------



