#!/bin/bash

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# <http://www.apache.org/licenses/LICENSE-2.0>
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
set -e

BASEDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
. $BASEDIR/ahr-lib.sh

function show_help(){

    echo "Set of operations to control popular preconfigured GTM Configurations."
    echo ""
    echo " ahr-lb-ctl create-proxy-mig|create-xlb|create-external-ip|check-ssl-status|configure-backend|create-gxlb|deploy-start-script-to-gcs"
    echo ""
    echo "Examples:"
    echo ""
}

# options
pps=""
while(($#)); do
case "$1" in
  -p|--project)
    PROJECT="$2"
    shift 2;;

  -n|--network)
    NETWORK="$2"
    shift 2;;

  -r|--region)
    REGION="$2"
    shift 2;;

  -z|--zone)
    ZONE="$2"
    shift 2;;

  -x|--ax-region)
    AX_REGION="$2"
    shift 2;;

  *)
    pps="$pps $1"
    shift;;
esac
done
eval set -- "$pps"


ACTION="$1"

#-----------------------------------------------------------------------
# TODO: [ ] pre-1.3.x version; migrate to get-apigeectl
if [ "create-proxy-mig" == "$ACTION" ]; then

XXXX
# TODO: [ ] create a firewall rule with tag "healthcheck" for port 15021 (/healthz/ready)

gcloud compute instance-templates create "$MIG" \
  --region "$REGION" --network "$NETWORK" \
  --subnet "$SUBNET" \
  --no-address \
  --tags=https-server,healthcheck,apigee-network-proxy,gke-apigee-proxy \
  --machine-type "$PROXY_MACHINE_TYPE" \
  --image-family centos-7 \
  --image-project centos-cloud --boot-disk-size 20GB \
  --metadata ENDPOINT="$APIGEE_ENDPOINT",startup-script-url=gs://apigee-5g-saas/apigee-envoy-proxy-release/latest/conf/startup-script.sh --project "$PROJECT"

echo "Step 7c.2: Create a managed instance group"
gcloud compute instance-groups managed create "$MIG" \
  --base-instance-name apigee-proxy \
  --size "$PROXY_MIG_MIN_SIZE" --template "$MIG" --region "$REGION" --project "$PROJECT"

echo "Step 7c.3: Configure autoscaling for the group"
gcloud compute instance-groups managed set-autoscaling "$MIG" \
  --region "$REGION" --max-num-replicas 5 \
  --target-cpu-utilization 0.75 --cool-down-period 90 --project "$PROJECT"

echo "Step 7c.4: Defined a named port"

gcloud compute instance-groups managed set-named-ports "$MIG" \
  --region "$REGION" --named-ports https:443 --project "$PROJECT"


#-----------------------------------------------------------------------
elif [ "create-external-ip" == "$ACTION" ]; then

    pass


echo "Step 7d.1: Reserve an IP address for the Load Balancer"
gcloud compute addresses create lb-ipv4-vip-1 --ip-version=IPV4 --global --project "$PROJECT"

echo "Step 7d.2: Get a reserved IP address"

RUNTIME_IP=$(gcloud compute addresses describe lb-ipv4-vip-1 --format="get(address)" --global --project "$PROJECT")
export RUNTIME_IP

RUNTIME_IP=34.117.145.185


FQDN= 34-117-145-185.nip.io

RUNTIME_HOST_ALIAS=$(echo "$RUNTIME_IP" | tr '.' '-').nip.io

echo $RUNTIME_HOST_ALIAS

gcloud compute ssl-certificates create apigee-ssl-cert \
    --domains="$RUNTIME_HOST_ALIAS" --project "$PROJECT"

XXXXX
TODO: [ ] add the FQDN to the envgroup definition in the org

#-----------------------------------------------------------------------
elif [ "check-ssl-status" == "$ACTION" ]; then

    pass

gcloud beta compute ssl-certificates describe nipsslcertificate \
    --global \
    --format="get(managed.domainStatus,managed.status)"


#-----------------------------------------------------------------------
elif [ "configure-backend" == "$ACTION" ]; then


echo "Step 7f.1: Create a health check"
gcloud compute health-checks create http hc-apigee-proxy-15021 \
  --port 15021 --global \
  --request-path /healthz/ready --project "$PROJECT"


echo "Step 7f.2: Create a backend service called 'apigee-proxy-backend'"

gcloud compute backend-services create apigee-proxy-backend \
  --protocol HTTPS --health-checks hc-apigee-proxy-15021 \
  --port-name https --timeout 60s --connection-draining-timeout 300s --global --project "$PROJECT"

echo "Step 7f.3: Add the Load Balancer Proxy VM instance group to your backend service"
gcloud compute backend-services add-backend apigee-proxy-backend \
  --instance-group "$MIG" \
  --instance-group-region "$REGION" \
  --balancing-mode UTILIZATION --max-utilization 0.8 --global --project "$PROJECT"



#-----------------------------------------------------------------------
elif [ "create-gxlb" == "$ACTION" ]; then


echo "INFO: GXLB: Create a Load Balancing URL map"
gcloud compute url-maps create apigee-proxy-map \
  --default-service apigee-proxy-backend --project "$PROJECT"

echo "INFO: GXLB: Create a Load Balancing target HTTPS proxy"
gcloud compute target-https-proxies create apigee-proxy-https-proxy \
  --url-map apigee-proxy-map \
  --ssl-certificates apigee-ssl-cert --project "$PROJECT"

echo "INFO: GXLB: Create a global forwarding rule"
gcloud compute forwarding-rules create apigee-proxy-https-lb-rule \
  --address lb-ipv4-vip-1 --global \
  --target-https-proxy apigee-proxy-https-proxy --ports 443 --project "$PROJECT"




#-----------------------------------------------------------------------
elif [ "deploy-start-script-to-gcs" == "$ACTION" ]; then

    check_envvars "PROXY_SCRIPT REGION"
    check_commands "gsutil"

    gsutil ls -b gs://apigee-mig-proxy || gsutil mb -l $REGION gs://apigee-mig-proxy

    gsutil cp $PROXY_SCRIPT gs://apigee-mig-proxy


#-----------------------------------------------------------------------
else
    echo "Action unknown: $ACTION"
    echo ""
    show_help
    exit 2
fi
#-----------------------------------------------------------------------



