#!/bin/bash

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

BASEDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
. $BASEDIR/ahr-lib.sh




##### CLUSTER CLUSTER_ZONE CLUSTER_LOCATIONS PROJECT ORG MACHINE_TYPE"

function show_help(){

    echo "Set of operations to control Hybrid runtime deployment."
    echo ""
    echo " ahr-runtime-ctl get|home|template|apigeectl|delete|setsync|setproperty|org-validate-name|org-create|org-config|env-create|env-group-create|env-group-assign"
    echo ""
    echo "Examples:"
    echo "    ahr-runtime-ctl template \$AHR_HOME/templates/overrides-large-template.yaml"
    echo ""
    echo "    ahr-runtime-ctl install-profile <project> <profile-name>"
    echo ""
    echo "    ahr-runtime-ctl apigeectl <apigeectl-command-line-arguments>"
    echo ""
    echo "    ahr-runtime-ctl apigeectl wait-for-ready <other-arguments-like-f-and-c>."
    echo ""
    echo "    ahr-runtime-ctl setsync <sa-email or \"\" to reset>"
    echo "    ahr-runtime-ctl setproperty <property> <value>"
    echo ""
    echo "    ahr-runtime-ctl org-config"
    echo "    ahr-runtime-ctl org-validate-name <org-name>"
    echo "    ahr-runtime-ctl org-create <org-name> --ax-region <ax-region>"
    echo "         ax-region: asia-east1 asia-northeast1 asia-southeast1"
    echo "                    australia-southeast1 europe-west1 europe-west2"
    echo "                    us-central1 us-east1 us-east4 us-west1"
    echo ""
    echo "    ahr-runtime-ctl env-create <env-name>"
    echo "    ahr-runtime-ctl env-list"
    echo "    ahr-runtime-ctl env-group-create <env-group-name> <runtime-host-alias>"
    echo "    ahr-runtime-ctl env-group-config <env-group-name>"
    echo "    ahr-runtime-ctl env-group-assign <org-name> <env-group-name> <env-name>"
    echo ""
    echo "    ahr-runtime-ctl ad-rollout-restart $AD"
    echo ""
}



function set_sync(){
    local synchronizer_sa_id=$1

    local identity=""
    if [ ! -z "$synchronizer_sa_id" ]; then
        identity="\"serviceAccount:$synchronizer_sa_id\""
    fi

    curl -X POST -H "Authorization: Bearer $(token)" -H "Content-Type:application/json" "https://apigee.googleapis.com/v1/organizations/$ORG:setSyncAuthorization" --data-binary @- <<EOF
{
    "identities": [ $identity ]
}
EOF

}


function validate_org_name(){
    local org_name=$1

    if [[ ! "${org_name}" =~ ^([a-z]{1})([a-z0-9-]*)$ ]]; then
       echo "The organization ID: '$org_name' can contain only lower- case letters, digits, and hyphens."

    elif [ ${#org_name} -gt 32   ]; then
       echo "The organization ID: '$org_name' has a maximum length of 32 characters."

    else

       echo "The organization ID: '$org_name' is valid"
    fi
}


# put items of the comman separeted list into double quotes
function quotes() {
    echo "$1" | awk 'BEGIN{FS=",";OFS=","}{for(i=1;i<=NF;i++) $i="\""$i"\""; print}'
}

ACTION="$1"

#-----------------------------------------------------------------------
# TODO: [ ] pre-1.3.x version; migrate to get-apigeectl
if [ "get" == "$ACTION" ]; then

    check_envvars "HYBRID_HOME HYBRID_VERSION HYBRID_TARBALL RUNTIME_CONFIG"




mkdir -p $HYBRID_HOME
cd $HYBRID_HOME


curl --silent -LO https://storage.googleapis.com/apigee-public/apigee-hybrid-setup/$HYBRID_VERSION/$HYBRID_TARBALL

tar xvzf $HYBRID_TARBALL > /dev/null

# define APIGEECTL_HOME
export APIGEECTL_HOME=$HYBRID_HOME/$(tar tf $HYBRID_HOME/$HYBRID_TARBALL | grep VERSION.txt | cut -d "/" -f 1)

export PATH=$APIGEECTL_HOME:$PATH

echo "# To define APIGEECTL_HOME in your shell, execute:"
echo "export APIGEECTL_HOME=$APIGEECTL_HOME"
echo "export PATH=\$APIGEECTL_HOME:\$PATH"
echo ""
echo "# or"
echo "source <(ahr-runtime-ctl home)"



#-----------------------------------------------------------------------
elif [ "get-apigeectl" == "$ACTION" ]; then

    check_envvars "HYBRID_HOME HYBRID_VERSION PLATFORM APIGEECTL_TARBALL_URL APIGEECTL_TARBALL"

mkdir -p $HYBRID_HOME
cd $HYBRID_HOME

echo "# Getting apigeectl tarball URL: $APIGEECTL_TARBALL_URL"

curl --silent -LO $APIGEECTL_TARBALL_URL

echo "# Untarring tarball: $APIGEECTL_TARBALL to $HYBRID_HOME"

tar xvzf $APIGEECTL_TARBALL > /dev/null

# define APIGEECTL_HOME
export APIGEECTL_HOME=$HYBRID_HOME/$(tar tf $HYBRID_HOME/$APIGEECTL_TARBALL | grep VERSION.txt | cut -d "/" -f 1)

export PATH=$APIGEECTL_HOME:$PATH

echo "# To define APIGEECTL_HOME in your shell, execute:"
echo "export APIGEECTL_HOME=$APIGEECTL_HOME"
echo "export PATH=\$APIGEECTL_HOME:\$PATH"
echo ""
echo "# or"
echo "# source <(ahr-runtime-ctl home)"


#-----------------------------------------------------------------------
elif [ "get-apigeectl-home" == "$ACTION" ]; then
  GET_HOME_APIGEECTL_TARBALL=$2
  if [ -z "$GET_HOME_APIGEECTL_TARBALL" ]; then
     echo "ERROR: apigeectl tarball file is missing"
     exit 8
  fi

  GET_HOME_ABS_DIR=$(cd "$(dirname "$GET_HOME_APIGEECTL_TARBALL")"; pwd)

  GET_HOME_APIGEECTL_HOME=$(tar tf $GET_HOME_APIGEECTL_TARBALL | grep VERSION.txt | cut -d "/" -f 1)

  APIGEECTL_HOME="$GET_HOME_ABS_DIR/$GET_HOME_APIGEECTL_HOME"

  echo "# To define APIGEECTL_HOME in your shell, execute:"
  echo "#   source <(ahr-runtime-ctl get-apigeectl-home \$HYBRID_HOME/\$APIGEECTL_TARBALL)"

  echo "export APIGEECTL_HOME=$APIGEECTL_HOME"
  echo "export PATH=\$APIGEECTL_HOME:\$PATH"


#-----------------------------------------------------------------------
elif [ "apigeectl" == "$ACTION" ]; then


check_envvars "APIGEECTL_HOME"


## apigeectl wrapper

#
# 
# wraps the fact that apigeectl needs to be executed in $APIGEECTL_HOME
# adds wait-for-ready operation
#

cd $APIGEECTL_HOME

if [[ " ${@} " =~ " wait-for-ready " ]]; then

    bash <<T
while true; do
    exit_code=\$(${@/wait-for-ready/check-ready} 2>/dev/null; echo \$?)
    if [ \$exit_code -ne 0 ]; then
        echo -n "."
        sleep 5
    else
        echo ""
        break
    fi
done
T

else 
#    exit_code=
${@}
#; echo $?)
#    exit $exit_code
fi 



#-----------------------------------------------------------------------

# TODO: setproperty smart[not override
# TODO: move to org enable?????

elif [ "setproperty" == "$ACTION" ]; then

check_envvars "ORG"

    if [ "$#" -lt 3 ]; then
        echo "ERROR: Missing property or value."
        echo ""
        show_help
        exit 5
    fi

    PROPERTY=$2
    VALUE=$3


    ORG_PROPERTIES=$( curl --silent -X GET -H "Content-Type: application/json" -H "Authorization: Bearer $(token)" https://apigee.googleapis.com/v1/organizations/$ORG )
echo "---"
echo $ORG_PROPERTIES
echo "---"
    ORG_PROPERTIES=$( echo $ORG_PROPERTIES | jq ".properties.property |= (map(.name) | index(\"$PROPERTY\") ) as \$ix | if \$ix then .[\$ix][\"value\"]=\"$VALUE\" else . + [{name: \"$PROPERTY\", value:\"$VALUE\"}] end" )
echo $ORG_PROPERTIES
echo "---"

    curl --silent -X PUT -H "Content-Type: application/json" -H "Authorization: Bearer $(token)" https://apigee.googleapis.com/v1/organizations/$ORG --data-binary @- <<EOF
$ORG_PROPERTIES
EOF


#-----------------------------------------------------------------------
elif [ "home" == "$ACTION" ]; then


check_envvars "HYBRID_HOME HYBRID_TARBALL CONTEXT"

    export APIGEECTL_HOME=$HYBRID_HOME/$(tar tf $HYBRID_HOME/$HYBRID_TARBALL | grep VERSION.txt | cut -d "/" -f 1)

    echo "# To define APIGEECTL_HOME in your shell, execute:"
    echo "#   source <(ahr-runtime-ctl home)"

    echo "export APIGEECTL_HOME=$APIGEECTL_HOME"
    echo "export PATH=\$APIGEECTL_HOME:\$PATH"

    echo "# set current context and default namespace to apigee"
    echo "kubectl config use-context \$CONTEXT"
    echo "kubectl config set-context --current --namespace=apigee"

#-----------------------------------------------------------------------
elif [ "template" == "$ACTION" ]; then

    TEMPLATE=$2
    if [ "$TEMPLATE" = "" ]; then
        echo "ERROR: Missing template file reference."
        echo ""

        show_help
        exit 5
    fi

    TEMPLATE_VARS=$(envsubst --variables  "$(cat $TEMPLATE)"|sort -u)

    check_envvars "$TEMPLATE_VARS"

    envsubst < $TEMPLATE

#-----------------------------------------------------------------------
elif [ "setsync" == "$ACTION" ]; then

    if [ "$#" -lt 2 ]; then
        echo "ERROR: Missing synchronizer SA ID in the form of the email."
        echo ""
        show_help
        exit 5
    fi
    synchronizer_sa_id="$2"

    check_envvars "ORG"

    set_sync "$synchronizer_sa_id"

#-----------------------------------------------------------------------
elif [ "delete" == "$ACTION" ]; then

   echo -e "Deleting hybrid install...."

    apigeectl delete -f $RUNTIME_CONFIG --all

#-----------------------------------------------------------------------
elif [ "org-config" == "$ACTION" ]; then

    check_envvars "ORG"

echo "Hybrid Organization $ORG  properties:"
curl -H "Authorization: Bearer $(token)" -H "Content-Type:application/json" "https://apigee.googleapis.com/v1/organizations/$ORG"


echo "Sync Authorization:"
curl -X POST -H "Authorization: Bearer $(token)" -H "Content-Type:application/json" "https://apigee.googleapis.com/v1/organizations/$ORG:getSyncAuthorization"

#-----------------------------------------------------------------------
elif [ "org-validate-name" == "$ACTION" ]; then

     validate_org_name $2

#-----------------------------------------------------------------------
elif [ "org-create" == "$ACTION" ]; then
    if [ "$#" -lt 2 ]; then
        echo "ERROR: No org name is provided."
        echo ""
        show_help
        exit 5
    fi

    ## TODO: ahr-runtime-ctl org-create hybrid-org --ax-region europe-west1
    ## TODO: process org parameter as the one after org-create
    ## TODO: move AX_REGION from positional to --option
    ORG=$2
    AX_REGION=$4

check_envvars "PROJECT"
check_commands "jq"

curl -H "Authorization: Bearer $(token)" -H "Content-Type: application/json" https://apigee.googleapis.com/v1/organizations?parent=projects/$PROJECT --data-binary @- <<EOF
{
    "name":"$ORG",
    "displayName":"$ORG",
    "description":"organization_description",
    "runtimeType":"HYBRID",
    "analyticsRegion":"$AX_REGION"
}
EOF

# make it a synchronous call
wait_for_ready "\"$ORG\"" 'curl --silent -H "Authorization: Bearer $(token)" -H "Content-Type: application/json"  https://apigee.googleapis.com/v1/organizations/$ORG | jq ".name"' "Organization $ORG is created." 

#-----------------------------------------------------------------------
elif [ "env-create" == "$ACTION" ]; then
    if [ "$#" -lt 2 ]; then
        echo "ERROR: No environment name is provided."
        echo ""
        show_help
        exit 5
    fi

    ENV=$2

check_envvars "ORG"
curl -H "Authorization: Bearer $(token)" -H "Content-Type: application/json"  https://apigee.googleapis.com/v1/organizations/$ORG/environments --data-binary @- <<EOT
{
  "name": "$ENV",
  "description": "$ENV environment",
  "displayName": "$ENV"
}
EOT

# make it a synchronous call
wait_for_ready "\"$ENV\"" 'curl --silent -H "Authorization: Bearer $(token)" -H "Content-Type: application/json"  https://apigee.googleapis.com/v1/organizations/$ORG/environments/$ENV | jq ".name"' "Environment $ENV of Organization $ORG is created."



#-----------------------------------------------------------------------
elif [ "env-list" == "$ACTION" ]; then

check_envvars "ORG"
curl --silent -H "Authorization: Bearer $(token)" -H "Content-Type: application/json"  https://apigee.googleapis.com/v1/organizations/$ORG/environments


#-----------------------------------------------------------------------
elif [ "env-group-create" == "$ACTION" ]; then
    if [ "$#" -lt 3 ]; then
        echo "ERROR: No environment group name or DNS name is provided."
        echo ""
        echo "    ahr-runtime-ctl env-group-create <env-group-name> <runtime-host-alias>"
        show_help
        exit 5
    fi
    ENV_GROUP=$2
    HOSTNAMES=$(quotes "$3" )

check_envvars "ORG"

curl -H "Authorization: Bearer $(token)" -H "Content-Type: application/json" https://apigee.googleapis.com/v1/organizations/$ORG/envgroups --data-binary @- <<EOT
{
  "name": "$ENV_GROUP",
  "hostnames": [ $HOSTNAMES ]
}
EOT

#-----------------------------------------------------------------------
elif [ "env-group-config" == "$ACTION" ]; then
    if [ "$#" -lt 2 ]; then
        echo "ERROR: No environment group name or DNS name is provided."
        echo ""
        echo "    ahr-runtime-ctl env-group-config <env-group-name> <runtime-host-alias>"
        show_help
        exit 5
    fi
    ENV_GROUP=$2

check_envvars "ORG"

curl -H "Authorization: Bearer $(token)" -H "Content-Type: application/json" https://apigee.googleapis.com/v1/organizations/$ORG/envgroups/$ENV_GROUP

#-----------------------------------------------------------------------
elif [ "env-group-set-hostnames" == "$ACTION" ]; then
    if [ "$#" -lt 3 ]; then
        echo "ERROR: No environment group name or hostname(s) is provided."
        echo ""
        echo "    ahr-runtime-ctl env-group-config <env-group-name> <runtime-host-alias(es)-comma-separated>"
        show_help
        exit 5
    fi
    ENV_GROUP=$2
    HOSTNAMES=$(quotes "$3" )

check_envvars "ORG"


curl -X PATCH -H "Authorization: Bearer $(token)" -H "Content-Type: application/json" https://apigee.googleapis.com/v1/organizations/$ORG/envgroups/$ENV_GROUP --data-binary @- <<EOT
{
  "name": "$ENV_GROUP",
  "hostnames": [ $HOSTNAMES ]
}
EOT

#-----------------------------------------------------------------------
elif [ "env-group-assign" == "$ACTION" ]; then
    if [ "$#" -lt 4 ]; then
        echo "ERROR: No organization name or environment group name or environment name is provided."
        echo ""
        echo "    ahr-runtime-ctl env-group-assign <org-name> <env-group-name> <env-name>"
        show_help
        exit 5
    fi
    ORG=$2
    ENV_GROUP=$3
    ENV=$4

check_envvars "ORG"

curl -H "Authorization: Bearer $(token)" -H "Content-Type: application/json" https://apigee.googleapis.com/v1/organizations/$ORG/envgroups/$ENV_GROUP/attachments --data-binary @- <<EOT
{
  "environment": "$ENV"
}
EOT

#-----------------------------------------------------------------------
elif [ "ad-rollout-restart" == "$ACTION" ]; then
    if [ "$#" -lt 2 ]; then
        echo "ERROR: ApigeeDeployment is not provided."
        echo ""
        echo "    ahr-runtime-ctl ad-rollout-restart \$AD"
        show_help
        exit 5
    fi
    AD=$2
    NS=apigee

    check_commands "kubectl"

    kubectl -n $NS patch ad $AD -p '{"release":{"replaceWithClone":true}}' --type=merge

#-----------------------------------------------------------------------
elif [ "install-profile" == "$ACTION" ]; then
    if [ "$#" -lt 3 ]; then
        echo "ERROR: Either hybrid profile or asm profile parameters are not provided."
        echo ""
        echo "    ahr-runtime-ctl install-profile <hybrid-profile> <asm-profile> [-c <comp[,comp]>]"
        echo ""
        echo "Example:"
        echo "    ahr-runtime-ctl install-profile small asm-gcp"
        echo ""
        echo "Required Environment Variable: AHR_HOME PROJECT"
        echo ""
        echo "Supported hybrid profiles: small"
        echo "Supported asm profiles: asm-gcp asm-multicloud"
        echo "Supported comma-separated components: cluster cert-manager gcp-ip istio apigee-org runtime "
        echo ""
        echo "Override if you wish (ie, set up before calling the operation):"
        echo "    HYBRID_HOME HYBRID_VERSION"
        echo "    REGION ZONE AX_REGION"
        echo "    CLUSTER_VERSION MACHINE_TYPE_DATA MACHINE_TYPE_RUNTIME"
        echo "    ASM_VERSION CERT_MANAGER_MANIFEST"
        exit 5
    fi


pps=""

#defaults

#home for hybrid installation
export HYBRID_HOME=${HYBRID_HOME:-~/apigee-hybrid-install}

# install all componenets by default
COMPS=";all;"

# options
while(($#)); do
case "$1" in
  -c|--component)
    COMPS="$2"

    # TODO: [ ] validate legitimate components are present

    COMPS=";${COMPS//,/;};"

    shift 2;;

  -q|--quiet)
    QUIET=Y
    shift;;

  *)
    pps="$pps $1"
    shift;;
esac
done
eval set -- "$pps"


    HYBRID_PROFILE=$2
    ASM_PROFILE=$3

    check_envvars "AHR_HOME PROJECT HYBRID_HOME HYBRID_PROFILE ASM_PROFILE"

# 
# profile: small
# 

export PROJECT

#-----------------------------------------------------------------------
if [[ "$COMPS" =~ ";all;" ]]; then

echo -e "Pre-flight checks and settings: gcp project; product versions; enabling apis...\n"


## Hybrid Install Environment bootstrapping and version selection persistance
#"

export HYBRID_VERSION=${HYBRID_VERSION:-1.5.1}

export HYBRID_ENV=$HYBRID_HOME/hybrid-$HYBRID_VERSION.env


mkdir -p $HYBRID_HOME

export HYBRID_VERSION_MINOR=$(echo -n "$HYBRID_VERSION"|awk '{sub(/\.[0-9]$/,"");print}')

export HYBRID_ENV_EXAMPLE=$AHR_HOME/examples/hybrid-sz-s-$HYBRID_VERSION_MINOR.sH

cp $HYBRID_ENV_EXAMPLE $HYBRID_ENV

export RUNTIME_TEMPLATE=$AHR_HOME/templates/overrides-small-$HYBRID_VERSION_MINOR-template.yaml

#' persist version selection
sed -i -E "s/^(export HYBRID_VERSION=).*/\1$HYBRID_VERSION/g" $HYBRID_ENV

if [ -n "$CLUSTER_VERSION" ]; then
  sed -i -E "s/^(export CLUSTER_VERSION=).*/\1$CLUSTER_VERSION/g" $HYBRID_ENV
fi


if [ -n "$CERT_MANAGER_MANIFEST" ]; then
  sed -i -E "s|^(export CERT_MANAGER_MANIFEST=).*|\1$CERT_MANAGER_MANIFEST|g" $HYBRID_ENV
fi

if [ -n "$ASM_VERSION" ]; then
  sed -i -E "s/^(export ASM_VERSION=).*/\1$ASM_VERSION/g" $HYBRID_ENV
fi

source $HYBRID_ENV

echo "Apigee Hybrid Configuration:"
echo ""

echo "Apigee Hybrid Version: $HYBRID_VERSION"

echo "Apigee Hybrid ENV Example: $HYBRID_ENV_TEMPLATE"
echo "Apigee Hybrid Runtime Template: $RUNTIME_TEMPLATE"

echo "GKE Cluster Version: $CLUSTER_VERSION"
echo "GKE Cluster Template: $CLUSTER_TEMPLATE"

echo "Certificate Manager manifest: $CERT_MANAGER_MANIFEST"
echo "ASM version: $ASM_VERSION"


echo -e "\nUsing Project: $PROJECT"


#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# confirm if not quiet install
if [ ! "$QUIET" = "Y" ]; then
  read -p "Do you want to continue with the config above (use --quiet to suppress)? [Y/n]: " -n 1 -r REPLY; printf "\n"
  REPLY=${REPLY:-Y}

  if [[ "$REPLY" =~ ^[Yy]$ ]]; then
    echo "Starting Installation..."
  else
    exit 1
  fi
fi
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

gcloud config set project $PROJECT

echo "Sourcing Hybrid Environment: $HYBRID_ENV"
source <(grep 'export REGION=' $HYBRID_ENV)

ahr-verify-ctl api-enable

fi

#-----------------------------------------------------------------------
if [[ "$COMPS" =~ ";gcp-ip;" ]] || [[ "$COMPS" =~ ";all;" ]]; then

echo "Provision Static IP Address and Configuring \$RUNTIME_IP variable..."


    check_envvars "HYBRID_ENV REGION"


# Provision Load Balancer
set +e
gcloud compute addresses create runtime-ip --region $REGION
set -e

export RUNTIME_IP=$(gcloud compute addresses describe runtime-ip --region $REGION --format='value(address)')

sed -i -E "s/^(export RUNTIME_IP=).*/\1$RUNTIME_IP/g" $HYBRID_ENV

fi



#-----------------------------------------------------------------------
if [[ "$COMPS" =~ ";cluster;" ]] || [[ "$COMPS" =~ ";all;" ]]; then

    check_envvars "CLUSTER_CONFIG"

echo "Kubernetes Cluster Version: $CLUSTER_VERSION"
echo "Creating GKE Cluster using configuration: $CLUSTER_CONFIG..."

# Create GKE cluster
ahr-cluster-ctl template $CLUSTER_TEMPLATE > $CLUSTER_CONFIG

set +e
ahr-cluster-ctl create
set -e

fi

#-----------------------------------------------------------------------
if [[ "$COMPS" =~ ";cert-manager;" ]] || [[ "$COMPS" =~ ";all;" ]]; then

    check_envvars "CERT_MANAGER_MANIFEST"

echo "Installing Certificate Manager version: $CERT_MANAGER_MANIFEST"

kubectl apply --validate=false -f $CERT_MANAGER_MANIFEST > /dev/null

fi

#-----------------------------------------------------------------------
if [[ "$COMPS" =~ ";istio;" ]] || [[ "$COMPS" =~ ";all;" ]]; then

    check_envvars "PROJECT ASM_VERSION HYBRID_HOME"


echo "ASM version: $ASM_VERSION"

# Get ASM and add _HOME to PATH
source <(ahr-cluster-ctl asm-get $ASM_VERSION)


# Use supplied istio-operator.yaml 
export PROJECT_NUMBER=$(gcloud projects describe ${PROJECT} --format="value(projectNumber)")
export ref=\$ref
export ASM_VERSION_MINOR=$(echo "$ASM_VERSION"|awk '{sub(/\.[0-9]+-asm\.[0-9]+/,"");print}')

ahr-cluster-ctl template $AHR_HOME/templates/istio-operator-$ASM_VERSION_MINOR-$ASM_PROFILE.yaml > $ASM_CONFIG

# Configure GKE cluster
ahr-cluster-ctl asm-gke-configure "$ASM_VERSION_MINOR"


# common
if [ "$ASM_VERSION_MINOR" = "1.5" ]; then
    istioctl manifest apply -f $ASM_CONFIG
else # >= 1.6
    istioctl install -f $ASM_CONFIG
fi


fi
#-----------------------------------------------------------------------
if [[ "$COMPS" =~ ";apigee-org;" ]] || [[ "$COMPS" =~ ";all;" ]]; then

    check_envvars "AHR_HOME ORG ENV ENV_GROUP AX_REGION"
    check_envvars "SYNCHRONIZER_SA_ID RUNTIME_SSL_CERT RUNTIME_SSL_KEY RUNTIME_HOST_ALIAS"

printf "\nAHR: Configuring Apigee Organization: $ORG, Environment: $ENV\n"


ahr-runtime-ctl org-validate-name $ORG
ahr-runtime-ctl org-create $ORG --ax-region $AX_REGION
ahr-runtime-ctl env-create $ENV
ahr-runtime-ctl env-group-create $ENV_GROUP $RUNTIME_HOST_ALIAS
ahr-runtime-ctl env-group-assign $ORG $ENV_GROUP $ENV

ahr-sa-ctl create-sa all
ahr-sa-ctl create-key all

ahr-runtime-ctl setsync $SYNCHRONIZER_SA_ID

ahr-verify-ctl cert-create-ssc $RUNTIME_SSL_CERT $RUNTIME_SSL_KEY $RUNTIME_HOST_ALIAS

# required if identity running the script is not a project owner
# gcloud projects add-iam-policy-binding $PROJECT --member $(get_account_as_member) --role roles/apigee.admin

fi

#-----------------------------------------------------------------------
if [[ "$COMPS" =~ ";runtime-config;" ]] || [[ "$COMPS" =~ ";all;" ]]; then

    check_envvars "HYBRID_VERSION RUNTIME_CONFIG"

printf "\nAHR: Generating Hybrid Runtime config: $RUNTIME_CONFIG\n"

export HYBRID_VERSION_MINOR=$(echo -n "$HYBRID_VERSION"|awk '{sub(/\.[0-9]$/,"");print}')
ahr-runtime-ctl template $RUNTIME_TEMPLATE > $RUNTIME_CONFIG

fi

#-----------------------------------------------------------------------
if [[ "$COMPS" =~ ";runtime;" ]] || [[ "$COMPS" =~ ";all;" ]]; then

    check_envvars "HYBRID_VERSION RUNTIME_CONFIG"

printf "\nAHR: Deploy Hybrid Runtime using configuration: $RUNTIME_CONFIG\n"


# Get Hybrid installation and set up APIGEECTL_HOME in PATH
source <(ahr-runtime-ctl get-apigeectl)


# Install Hybrid runtime

ahr-runtime-ctl apigeectl init -f $RUNTIME_CONFIG
ahr-runtime-ctl apigeectl wait-for-ready -f $RUNTIME_CONFIG

ahr-runtime-ctl apigeectl apply -f $RUNTIME_CONFIG
ahr-runtime-ctl apigeectl wait-for-ready -f $RUNTIME_CONFIG

fi

#-----------------------------------------------------------------------
if [[ "$COMPS" =~ ";source-env;" ]] || [[ "$COMPS" =~ ";all;" ]]; then

    check_envvars "PROJECT AHR_HOME HYBRID_HOME HYBRID_ENV ASM_VERSION APIGEECTL_HOME"


  if [[ "$COMPS" =~ ";all;" ]]; then
    echo -e "\nApigee Hybrid version $HYBRID_VERSION is installed.\n"
  fi


cat <<EOF > $HYBRID_HOME/source.env
export AHR_HOME=$AHR_HOME
export PATH=\$AHR_HOME/bin:\$PATH

source \$AHR_HOME/bin/ahr-completion.bash

export PROJECT=$PROJECT
export HYBRID_HOME=$HYBRID_HOME
export HYBRID_ENV=$HYBRID_ENV
source \$HYBRID_ENV

alias k=kubectl
source <(kubectl completion bash)
complete -F __start_kubectl k

export ASM_HOME=$HYBRID_HOME/istio-$ASM_VERSION
export PATH=\$ASM_HOME/bin:\$PATH

source \$ASM_HOME/tools/istioctl.bash

export APIGEECTL_HOME=$APIGEECTL_HOME
export PATH=\$APIGEECTL_HOME:\$PATH

EOF

echo "To set up your hybrid environment and deploy a ping proxy:"
echo "  source $HYBRID_HOME/source.env"
echo "  \$AHR_HOME/proxies/deploy.sh"

fi

#-----------------------------------------------------------------------
else
    echo "Action unknown: $ACTION"
    echo ""
    show_help
    exit 2
fi
#-----------------------------------------------------------------------
